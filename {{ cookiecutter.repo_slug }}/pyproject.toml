[tool.poetry]
name = "{{ cookiecutter.pypi_name }}"
version = "0.0.1"
description = "{{ cookiecutter.description }}"
authors = [
    "Matti Lamppu <lamppu.matti.akseli@gmail.com>",
]
packages = [
    { include = "{{ cookiecutter.module_slug }}" },
]
license = "MIT"
readme = "README.md"
homepage = "https://mrthearman.github.io/{{ cookiecutter.repo_slug }}"
repository = "https://github.com/MrThearMan/{{ cookiecutter.repo_slug }}"
keywords = [
    "...",
]
classifiers = [
    "Environment :: Web Environment",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",{% if cookiecutter.django_module %}
    "Framework :: Django :: 3.2",
    "Framework :: Django :: 4.0",
    "Framework :: Django :: 4.1",
    "Framework :: Django :: 4.2",{% endif %}
]
include = [
    "README.md",
    "LICENSE",
]
exclude = [
    "tests",
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/MrThearMan/{{ cookiecutter.repo_slug }}/issues"

[tool.poetry.dependencies]
python = ">=3.8,<4"{% if cookiecutter.django_module %}
Django = ">=3.2"
djangorestframework = ">=3.12.0"{% endif %}

[tool.poetry.group.test.dependencies]
pytest = "7.4.0"
coverage = "7.2.7"{% if cookiecutter.django_module %}
pytest-django = "4.5.2"{% endif %}
pre-commit = "3.3.3"
tox = "4.7.0"
tox-gh-actions = "3.1.3"

[tool.poetry.group.docs.dependencies]
mkdocs = "1.5.2"
pymdown-extensions = "10.1"
mkdocs-mermaid2-plugin = "1.0.8"

[tool.poetry.group.lint.dependencies]
mypy = "1.5.0"{% if cookiecutter.django_module %}
django-stubs = "4.2.3"
djangorestframework-stubs = "3.14.2"{% endif %}

[tool.black]
line-length = 120

[tool.ruff]
fix = true
line-length = 120
extend-exclude = [
    "tests/*",
]
typing-modules = [
    "{{ cookiecutter.module_slug }}.typing",
]
select = [
    "A",        # flake8-builtins
    "ANN",      # flake8-annotations
    "ARG",      # flake8-unused-arguments
    "ASYNC",    # flake8-async
    "B",        # flake8-bugbear
    "BLE",      # flake8-blind-except
    "C90",      # mccabe
    "C4",       # flake8-comprehensions
    "COM",      # flake8-commas
    "DJ",       # flake8-django
    "DTZ",      # flake8-datetimez
    "E",        # pycodestyle errors
    "EM",       # flake8-errmsg
    "ERA",      # eradicate
    "F",        # pyflakes
    "FA",       # flake8-future-annotations
    "FBT",      # flake8-boolean-trap
    "I",        # isort
    "ICN",      # flake8-import-conventions
    "INP",      # flake8-no-pep420
    "INT",      # flake8-gettext
    "ISC",      # flake8-implicit-str-concat
    "N",        # pep8-naming
    "PERF",     # perflint
    "PGH",      # pygrep-hooks
    "PIE",      # flake8-pie
    "PL",       # pylint
    "PT",       # flake8-pytest-style
    "PTH",      # flake8-use-pathlib
    "PYI",      # flake8-pyi
    "Q",        # flake8-quotes
    "RUF",      # ruff-specific rules
    "S",        # flake8-bandit
    "SIM",      # flake8-simplify
    "SLF",      # flake8-self
    "SLOT",     # flake8-slots
    "T10",      # flake8-debugger
    "T20",      # flake8-print
    "TCH",      # flake8-type-checking
    "TRY",      # tryceratops
    "W",        # pycodestyle warnings
]
ignore = [
]

[tool.mypy]
python_version = "3.11"
warn_return_any = "True"
warn_unused_configs = "True"{% if cookiecutter.django_module %}
plugins = [
    "mypy_django_plugin.main",
    "mypy_drf_plugin.main",
]{% endif %}{% if cookiecutter.django_module %}

[tool.django-stubs]
django_settings_module = "tests.project.settings"{% endif %}

[tool.coverage.run]
relative_files = true

[tool.coverage.report]
omit = [
    "tests/*",
    "docs/*",
    ".venv/*",
    ".tox/*",
]
exclude_lines = [
    "if TYPE_CHECKING:",
    "except ImportError:",
    "pragma: no cover",
]

[tool.pytest.ini_options]
addopts = "-vv -s --log-cli-level=INFO"

[tool.tox]{% if cookiecutter.django_module %}
legacy_tox_ini = """
[tox]
envlist = py{39, 310, 311}-drf{312, 313, 314}
isolated_build = true

[gh-actions]
python =
    3.9: py39
    3.10: py310
    3.11: py311

[testenv]
allowlist_externals =
    poetry
setenv =
    PYTHONPATH = {toxinidir}
    DJANGO_SETTINGS_MODULE = tests.project.settings
deps =
    py39: Django >=3.2,<4.0

    py310-drf312: Django >=3.2,<4.0
    py310-drf313: Django >=4.0,<4.1
    py310-drf314: Django >=4.1,<4.2

    py311-drf312: Django >=3.2,<4.0
    py311-drf313: Django >=4.0,<4.1
    py311-drf314: Django >=4.2,<4.3

    drf312: djangorestframework >=3.12.0,<3.13.0
    drf313: djangorestframework >=3.13.0,<3.14.0
    drf314: djangorestframework >=3.14.0,<3.15.0

    pytest
    coverage
    pytest-django
commands =
    coverage run -m pytest -vv -s --log-cli-level=INFO
"""{% else %}legacy_tox_ini = """
[tox]
envlist = py{39, 310, 311}
isolated_build = true

[gh-actions]
python =
    3.9: py39
    3.10: py310
    3.11: py311

[testenv]
allowlist_externals =
    poetry
setenv =
    PYTHONPATH = {toxinidir}
commands =
    poetry install
    poetry run coverage run -m pytest
"""{% endif %}

[build-system]
requires = ["poetry-core>=1.5.0"]
build-backend = "poetry.core.masonry.api"
